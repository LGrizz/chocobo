{"name":"Chocobo","tagline":"Backbone-ish up your iOS models","body":"Backbon-ify your iOS models and make it extremely easy to communicate with a RESTful API. Provides an easy API to connect, communicate and return success/failure events.\r\n\r\n## Installation\r\n\r\nChocobo is available through [CocoaPods](http://cocoapods.org), to install\r\nit simply add the following line to your Podfile:\r\n\r\n    pod \"Chocobo\"\r\n\r\nThere's one other step that you will need to do in order to get it working. Add a file to your project and call it 'Environment.plist'. Inside of there you will need to specify your different API environments you want to use.\r\n\r\n![Pedro](https://dl.dropboxusercontent.com/u/420961/Screen%20Shot%202013-12-05%20at%205.16.13%20PM.png)\r\n\r\nNow finally add a 'Configuration' parameter to your app's plist.\r\n\r\n```c\r\n# support/appName.plist\r\n\r\nConfiguration (String) 'dev(or whatever you named your environment you want to use)'\r\n\r\n```\r\n\r\n## Usage\r\n\r\nChocobo allows you to easily create async models/collections in your iOS app to communicate easily with a RESTful API.\r\n\r\n### Models\r\n\r\nExtend your model from the Model object and specify all the attributes using properties.\r\n\r\n```c\r\n@interface User : Model\r\n\r\n@property (nonatomic, copy) NSNumber *userId;\r\n@property (nonatomic, copy) NSString *firstName;\r\n@property (nonatomic, copy) NSString *lastName;\r\n@property (nonatomic, copy) NSString *email;\r\n\r\n@end\r\n```\r\n\r\nNext you will need to override the models method 'updateModelWithJson:'\r\n\r\n```c\r\n-(void) updateModelWithJson:(NSDictionary *)json\r\n{\r\n    NSDictionary *attributes = [json valueForKey:@\"user\"];\r\n    self.userId = [attributes valueForKey:@\"id\"];\r\n    self.firstName = [attributes valueForKey:@\"first_name\"];\r\n    self.lastName = [attributes valueForKey:@\"last_name\"];\r\n    self.email = [attributes valueForKey:@\"email\"];\r\n}\r\n```\r\n\r\nNow you can call:\r\n\r\n```\r\n[self fetchFromEndpoint:@\"login.json\" withParams:parameters onSuccess:^(id responseObject) {\r\n\r\n        NSLog(@\"Do Something with your response object here\");\r\n\r\n    } onFailure:^(NSError *error)  {\r\n\r\n        NSLog(@\"Do something with the error\");\r\n\r\n    }];\r\n```\r\n\r\n### Collections\r\n\r\nCollections will extend off the Collection object.\r\n\r\n```c\r\n#import \"Collection.h\"\r\n\r\n@interface Users : Collection\r\n\r\n@end\r\n```\r\n\r\nYour collection will then need to overide 2 functions\r\n\r\n```c\r\n-(id)model\r\n{\r\n    return @\"User\";\r\n}\r\n\r\n-(NSString *)collectionEndpoint\r\n{\r\n    return @\"users.json\";\r\n}\r\n```\r\n\r\nThis will allow the collection to automatically grab all the models from the collection\r\nendpoint and set them in the models array.\r\n\r\nAccessing the models in a collection are easy. Just use the models accessor.\r\n\r\n```c\r\n[[collection models] objectAtIndex: 0];\r\n```\r\n\r\n### Has Many Relationships\r\n\r\nSetting up a has many relationship in your model is easy. Set up an NSMutableArray as a property on the\r\nmodel of the model type that the relationship is set.\r\n\r\n```c\r\n# models/user.h\r\n\r\n@property (nonatomic, retain) NSMutableArray *accounts;\r\n```\r\n\r\nSynthesize and set up the relationship in a loop inside your updateModelWithJson: function\r\n\r\n```c\r\n# models/user.m\r\n\r\n@synthesize wells = _wells;\r\n\r\n-(void) updateModelWithJson:(NSDictionary *)json\r\n{\r\n    for (NSDictionary* key in [json valueForKey:@\"accounts\"]) {\r\n        Account *accountModel = [[Account alloc] init];\r\n        [accountModel updateModelWithJson:key];\r\n\r\n        [self.accounts addObject:account];\r\n    }\r\n}\r\n```\r\n\r\n### Has One Relationships\r\n\r\nTo setup a has one relationship on your models, set up a property on your model of the type you would like to set it up with.\r\n\r\n```c\r\n# models/user.h\r\n\r\n#import 'Account.h'\r\n\r\n@property (nonatomic, retain) Account *account;\r\n```\r\n\r\nAnd then in updateModelWithJson:\r\n\r\n```c\r\n# models/user.m\r\n\r\n-(void) updateModelWithJson:(NSDictionary *)json\r\n{\r\n    Account *account = [[Account alloc] init];\r\n    [account updateModelWithJson: [json valueForKey:@\"account\"]];\r\n    self.account = account;\r\n}\r\n```\r\n\r\n## License\r\n\r\n** Creative Commons 3.0 - Attribution Sharealike**\r\n\r\nYou can remix, copy or use for both commercial and non-commercial products and services but you need to provide attribution for the original work in the source code to *\"PetroFeed Inc.\"*. You must also share the original or any derivative under the same license. A description of the license can be found [here](http://creativecommons.org/licenses/by-sa/3.0).\r\n\r\n---\r\n\r\nProudly brought to you by [PetroFeed](http://PetroFeed.com).\r\n\r\n\r\n![Pedro](https://www.petrofeed.com/img/company/pedro.png)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}